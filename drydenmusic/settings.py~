"""
Django settings for drydenmusic project.

Generated by 'django-admin startproject' using Django 1.8.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""
import os, django

#Set the env
DJANGO_ENV = os.environ.get('DJANGO_ENV') or 'development'

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# calculated paths for django and the site
# used as starting points for various other paths
DJANGO_ROOT = os.path.dirname(os.path.realpath(django.__file__))
SITE_ROOT = os.path.dirname(os.path.realpath(__file__))
PROJECT_DIR = os.path.dirname(__file__)
PROJECT_PATH = os.path.dirname(os.path.abspath(__file__))
if DJANGO_ENV == 'production':
    BASE_URL = 'drydenmusic.herokuapp.com'
    PROTOCOL = 'http'
elif DJANGO_ENV == 'staging':
    BASE_URL = 'drydenmusic.herokuapp.com'
    PROTOCOL = 'http'
else:
    BASE_URL = '127.0.0.1:8000'
    PROTOCOL = 'http'

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '=7@ajiv)=xv=ho-7%f0k0@vpdl73%e-$$l)u6$i@%n8kl6l$_0'

# SECURITY WARNING: don't run with debug turned on in production!

ALLOWED_HOSTS = ['.app.drydenmusic.com',
                     '.drydenmusic.herokuapp.com',
                     ]


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages',
    'DrydenMusicApp'
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'drydenmusic.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'drydenmusic.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

if DJANGO_ENV == 'development':
    #import ast
    #DATABASES = ast.literal_eval(os.environ.get('LOCAL_DJANGO_DATABASE'))
    NAME = os.environ.get('DRYDENMUSICDB')
    ENGINE = os.environ.get('ENGINE')
    USER = os.environ.get('USER')
    PASSWORD = os.environ.get('PASSWORD')
    HOST = os.environ.get('HOST')
    PORT = os.environ.get('PORT')
    DATABASES = {'default': {
                    'ENGINE': ENGINE,
                    'NAME': NAME,
                    'USER': USER,
                    'PASSWORD': PASSWORD,
                    'HOST': HOST,
                    'PORT': PORT},}
else:
    import dj_database_url
    DATABASES = {}
    DATABASES['default'] =  dj_database_url.config()


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'US/Eastern'

USE_I18N = True

USE_L10N = True

USE_TZ = True

if DJANGO_ENV == 'production':
    DEBUG = False
else:
    DEBUG = True

if DJANGO_ENV == 'development':
    STATICFILES_STORAGE = 'storages.backends.s3boto.S3BotoStorage' #need S3 for file_upload function
    #STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
else:
    # Always use S3 on staging/production
    STATICFILES_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
    
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY') 
AWS_STORAGE_BUCKET_NAME = os.environ.get('DRYDENMUSIC_S3BUCKET')
AWS_PRELOAD_METADATA = True
from datetime import date, timedelta
tenyrs = date.today() + timedelta(days=365*10)
# Expires 10 years in the future at 8PM GMT
AWS_HEADERS = {
    'Expires': tenyrs.strftime('%a, %d %b %Y 20:00:00 GMT')
}
AWS_QUERYSTRING_AUTH = False

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
if DJANGO_ENV == 'development':
    # Won't generally collect locally, but if we do, collect to here
    STATIC_ROOT = '%s/staticfiles/' % SITE_ROOT
else:
    STATIC_ROOT = '%s/staticfiles/' % SITE_ROOT
    
# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
if DJANGO_ENV == 'development':
    # Use this to at least pull css/js/etc. from local folder when no internet available
    #STATIC_URL = '/static/'
    
    #however, need to use the S3 line when creating new customers and need file_upload function
    STATIC_URL = 'http://%s.s3.amazonaws.com/' % AWS_STORAGE_BUCKET_NAME
else:
    STATIC_URL = 'http://%s.s3.amazonaws.com/' % AWS_STORAGE_BUCKET_NAME
    
# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(PROJECT_PATH, 'static'),
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # 'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Mail configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
SERVER_EMAIL = 'admin@drydenmusic.com'
DEFAULT_FROM_EMAIL = 'admin@drydenmusic.com'
EMAIL_TEMPLATE = os.environ.get('EMAIL_TEMPLATE') or 'sample-template'
BUILDINGSPEAK_EMAIL_USERNAME = os.environ.get('BUILDINGSPEAK_EMAIL_USERNAME')
BUILDINGSPEAK_EMAIL_PASSWORD = os.environ.get('BUILDINGSPEAK_EMAIL_PASSWORD')

if DJANGO_ENV == 'development':
  """
  EMAIL_HOST = 'localhost'
  EMAIL_PORT = os.environ.get('EMAIL_PORT') or 1025
  EMAIL_HOST_USER = ''
  EMAIL_HOST_PASSWORD = ''
  EMAIL_PROVIDER = 'localhost'
  """
  EMAIL_HOST = 'smtp.sendgrid.net'
  EMAIL_PORT = 587
  EMAIL_HOST_USER = BUILDINGSPEAK_EMAIL_USERNAME
  EMAIL_HOST_PASSWORD = BUILDINGSPEAK_EMAIL_PASSWORD
  EMAIL_PROVIDER = 'sendgrid'
  
else:
  EMAIL_HOST = 'smtp.sendgrid.net'
  EMAIL_PORT = 587
  EMAIL_HOST_USER = BUILDINGSPEAK_EMAIL_USERNAME
  EMAIL_HOST_PASSWORD = BUILDINGSPEAK_EMAIL_PASSWORD
  EMAIL_PROVIDER = 'sendgrid'
